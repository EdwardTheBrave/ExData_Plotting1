rate = table4_cases$cases / population *10000) %>%
arrange(country,year,rate)
rate4ab
library(ggplot2)
table2 %>%
filter(type == "cases") %>%
ggplot( aes(year, count)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
gather('1999', '2000', key = "year", value = "cases")
table4a %>%
#  gather(1999, 2000, key = "year", value = "cases")
gather('1999', '2000', key = "year", value = "cases")
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people %>% spread(name,key)
people %>% spread(name,key,value)
people %>% spread(name,key)
people %>% spread(name,key,value)
people <- tribble(
~name,             ~key,    ~value, ~obs,
#-----------------|--------|------|------
"Phillip Woods",   "age",       45, 1,
"Phillip Woods",   "height",   186, 1,
"Phillip Woods",   "age",       50, 2,
"Jessica Cordero", "age",       37, 1,
"Jessica Cordero", "height",   156, 1
)
spread(people, key, value)
people <- tribble(
~name,             ~key,    ~value, ~obs_per_key,
#-----------------|--------|------|------
"Phillip Woods",   "age",       45, 1,
"Phillip Woods",   "height",   186, 1,
"Phillip Woods",   "age",       50, 2,
"Jessica Cordero", "age",       37, 1,
"Jessica Cordero", "height",   156, 1
)
spread(people, key, value)
spread(people,key,value)
people <- tribble(
~name,             ~key,    ~value, ~observations
#-----------------|--------|-------|---------
"Phillip Woods",   "age",       45, 1
"Phillip Woods",   "height",   186, 1
"Phillip Woods",   "age",       50, 2
"Jessica Cordero", "age",       37, 1
"Jessica Cordero", "height",   156, 1
)
spread(people,key,value)
people <- tribble(
~name,             ~key,    ~value, ~observations
#-----------------|--------|-------|---------
"Phillip Woods",   "age",       45, 1,
"Phillip Woods",   "height",   186, 1,
"Phillip Woods",   "age",       50, 2,
"Jessica Cordero", "age",       37, 1,
"Jessica Cordero", "height",   156, 1
)
spread(people,key,value)
people <- tribble(
~name,             ~key,    ~value, ~observations,
#-----------------|--------|-------|---------
"Phillip Woods",   "age",       45, 1,
"Phillip Woods",   "height",   186, 1,
"Phillip Woods",   "age",       50, 2,
"Jessica Cordero", "age",       37, 1,
"Jessica Cordero", "height",   156, 1
)
spread(people,key,value)
preg <- tribble(
~pregnant, ~male, ~female,
"yes",     NA,    10,
"no",      20,    12
)
preg
gather(preg,male,female)
gather(preg,male,female,value)
pregnant_tidy <- preg %>%
gather(male, female, key = "sex", value = "count")
pregnant_tidy
wdir
getwd()
getwd()
cd Project
cd Projects
ls
?gsub
library(dplyr)
#####1.
data <- read.csv(url('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'),header=TRUE,sep=",")
colnames(data)
strsplit(colnames(data),"wgtp")[[123]]
###2.
gdp<- read.csv(url('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'),header=FALSE,sep=",", skip = 5,nrows=190,colClasses = "character")
head(gdp)
tail(gdp)
summary(gdp)
str(gdp$V5)
as.numeric((gdp$V5))
as.integer(gdp$V5)
mean(as.numeric(sub(",","",sub(",","",as.character(gdp$V5)))))
# mean(as.numeric(sub(",","",sub(",","",as.character(gdp$V5)))))
mean(as.numeric(gsub(",","",as.character(gdp$V5))))
edu_data <- read.csv(url('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'),header=TRUE,sep=",")
str(edu_data)
merged <- merge(gdp,edu_data,by.x = "V1",by.y = "CountryCode")
str(merged)
head(merged$Special.Notes)
length(grep("Fiscal year end: June",merged$Special.Notes))
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(amzn)
head(sampleTimes)
install.packages("lubridate")
library(lubridate)
sum(year(ymd(sampleTimes)) ==2012)
sampleTimes[year(ymd(sampleTimes)) ==2012]
weekdays(ymd(sampleTimes))
sum(weekdays(ymd(sampleTimes[year(ymd(sampleTimes)) ==2012])) == "Monday")
table(year(as.Date(sampleTimes)))
raw_vector <- c(
"OrderID",
"DateAdded",
"State",
"Zip",
"Email",
"Address",
"Address2",
"MarketID",
"ProgramName",
"ChannelName",
"PhoneCarrier_Twilio",
"MundoSales",
"TV.UltimateVideoSales",
"TV.ExtremeVideoSales",
"TV.PreferredVideoSales",
"TV.CustomVideoSales",
"TV.LocalVideoSales",
"QuantumTV.Sales",
"FiosVideoSales",
"FiosDataSales",
"FiosDataHighPlanSales",
"DownSpeed",
"UpSpeed",
"FiosVoiceSales",
"RevenueOrders",
"SinglePlayNE.Sales",
"DoublePlayNE.Sales",
"TriplePlayNonExistingSales",
"FiosNonExistingSales",
"TotalPostSales",
"InstalledRev",
"EmployeeID",
"TalkTIme",
"Browser",
"BrowserVersion",
"CallPage",
"City",
"Region",
"Country",
"DeviceType",
"Device",
"LandingPage",
"InternetSpeed",
"ZipCode_GeoIP",
"ISP",
"Referrer",
"Domain",
"AdGroup",
"Campaign",
"Keyword",
"KeywordMatchType"
)
raw_vector
grep(*[a-z][A-Z],raw_vector)
grep("*[a-z][A-Z]",raw_vector)
grepl("*[a-z][A-Z]",raw_vector)
library(dplyr)
raw_vector[ grepl("*[a-z][A-Z]",raw_vector) ]
raw_vector[ grepl("*[a-z][A-Z]",raw_vector) ]
indexes <- grepl("*[a-z][A-Z]",raw_vector)
indexes
?gsub
gsub("(*[a-z])([A-Z])","\\1\\L\\2",raw_vector)
gsub("(*[a-z])([A-Z])","\\1\\_\\2",raw_vector)
gsub("([a-z])([A-Z])","\\1\\_\\2",raw_vector)
gsub("[a-z][A-Z]","\\1\\_\\2",raw_vector)
gsub("([a-z])([A-Z])","\\1\\_\\L2",raw_vector)
gsub("([a-z])([A-Z])","\\1\\_\\\\L2",raw_vector)
gsub("([a-z])([A-Z])","\\1\\_\\2",raw_vector)
?lower
tolower(gsub("([a-z])([A-Z])","\\1\\_\\2",raw_vector))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
head(mpg)
mpg
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = cty))
ggplot(mpg, aes(x = displ, y = cty)) + geom_point()
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + geom_line()
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = displ < 5))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = cty < 5))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = cty))
?shape
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = "k" ))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = "." ))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = "k" ))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = 5 ))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = "5" ))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = displ < 5))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = displ < 5)) +
0
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = displ < 5)) +
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ class)
ggplot(data = mpg) +
geom_jitter(mapping = aes(x = drv, y = cyl), width = .4, height = .5)
summary(mpg)
ggplot(data = mpg) +
geom_jitter(mapping = aes(y = drv, x = cyl), width = .4, height = .5)
ggplot(data = mpg) +
geom_point(mapping = aes(y = drv, x = cyl), width = .4, height = .5)
ggplot(data = mpg) +
geom_jitter(mapping = aes(y = drv, x = cyl), width = .4, height = .5)
ggplot(data = mpg) +
geom_jitter(mapping = aes(y = drv, x = cyl), width = .2, height = .2)
geom_jitter(mapping = aes(y = drv, x = cyl) )
ggplot(data = mpg) +
geom_point(mapping = aes(y = drv, x = cyl) )
geom_point(mapping = aes(y = drv, x = cyl) , alpha =.01)
ggplot(data = mpg) +
geom_point(mapping = aes(y = drv, x = cyl) , alpha =.01)
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
dim(pollution$pm25)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm,col="blue")
abline(ppm,h=12)
abline(ppm,h="12")
abline(12)
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
dbline(v=12,lwd=2)
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(data=pollution,col="red")
boxplot(pm25 ~ region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region == "east")
subset(pollution,region=="east")
east <-subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution, region == "west")$pm25,col="green")
with(pollution, plot(latitude, pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
with(subset(pollution, region == "west"), plot(latitude, pm25, main = "West"))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
plot(speed,dist)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
def.off()
dev.off()
swirl()
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(with(airquality, plot(Wind, Ozone)))
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
?points
points(may,Wind,Ozone,col="blue")
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation") })
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2,
| 0))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer = TRUE)
## load libraries
library(lubridate)
##download data, read it, and save it in a variable
########################################
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
raw_data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE, na.strings="?", sep=";")
unlink(temp)
#######################################
### create DateTime column with combined date/time converted to objects.
raw_data$DateTime <- lubridate::dmy_hms(paste(raw_data$Date, raw_data$Time))
# get the dates we need
raw_data <- raw_data %>%
filter(year(DateTime) == 2007 & month(DateTime) == 2 & (day(DateTime) == 1 | day(DateTime) == 2)  )
### check data
# summary(raw_data)
## generate plot
plot(raw_data$Global_active_power~raw_data$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
# copy plot to file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
## load libraries
library(lubridate)
library(dplyr)
##download data, read it, and save it in a variable
########################################
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
raw_data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE, na.strings="?", sep=";")
unlink(temp)
#######################################
### create DateTime column with combined date/time converted to objects.
raw_data$DateTime <- lubridate::dmy_hms(paste(raw_data$Date, raw_data$Time))
# get the dates we need
raw_data <- raw_data %>%
filter(year(DateTime) == 2007 & month(DateTime) == 2 & (day(DateTime) == 1 | day(DateTime) == 2)  )
### check data
# summary(raw_data)
## generate plot
plot(raw_data$Global_active_power~raw_data$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
# copy plot to file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
q()
## load libraries
library(lubridate)
library(dplyr)
##set working directory ###  Make sure to update this to your local environment
setwd("~/Projects/ds200/ExData_Plotting1")
##download data, read it, and save it in a variable
########################################
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
raw_data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE, na.strings="?", sep=";")
unlink(temp)
#######################################
### create DateTime column with combined date/time converted to objects.
raw_data$DateTime <- lubridate::dmy_hms(paste(raw_data$Date, raw_data$Time))
# get the dates we need
raw_data <- raw_data %>%
filter(year(DateTime) == 2007 & month(DateTime) == 2 & (day(DateTime) == 1 | day(DateTime) == 2)  )
### check data
# summary(raw_data)
### prepare quadrants for plot
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
## generate plot
plot(raw_data$Global_active_power~raw_data$DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.6)
plot(raw_data$Voltage~raw_data$DateTime, type="l",
ylab="Voltage (volt)", xlab="", cex=0.6)
plot(raw_data$Sub_metering_1~raw_data$DateTime, type="l",
ylab="Energy sub metering (kilowatts)", xlab="", cex=0.6)
lines(raw_data$Sub_metering_2~raw_data$DateTime,col='Red')
lines(raw_data$Sub_metering_3~raw_data$DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), cex=0.3)
plot(raw_data$Global_reactive_power~raw_data$DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="", cex=0.6)
# copy plot to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
## generate plot
plot(raw_data$Global_active_power~raw_data$DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.6)
plot(raw_data$Voltage~raw_data$DateTime, type="l",
ylab="Voltage (volt)", xlab="", cex=0.6)
plot(raw_data$Sub_metering_1~raw_data$DateTime, type="l",
ylab="Energy sub metering (kilowatts)", xlab="", cex=0.6)
lines(raw_data$Sub_metering_2~raw_data$DateTime,col='Red')
lines(raw_data$Sub_metering_3~raw_data$DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), cex=0.5)
plot(raw_data$Global_reactive_power~raw_data$DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="", cex=0.6)
# copy plot to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
## generate plot
plot(raw_data$Global_active_power~raw_data$DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.6)
plot(raw_data$Voltage~raw_data$DateTime, type="l",
ylab="Voltage (volt)", xlab="", cex=0.6)
plot(raw_data$Sub_metering_1~raw_data$DateTime, type="l",
ylab="Energy sub metering (kilowatts)", xlab="", cex=0.6)
lines(raw_data$Sub_metering_2~raw_data$DateTime,col='Red')
lines(raw_data$Sub_metering_3~raw_data$DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), cex=0.5)
plot(raw_data$Global_reactive_power~raw_data$DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="", cex=0.6)
# copy plot to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
q()
